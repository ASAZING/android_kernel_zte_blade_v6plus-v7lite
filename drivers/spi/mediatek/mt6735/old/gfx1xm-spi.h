#ifndef __GFX1XM_SPI_H
#define __GFX1XM_SPI_H

#include <linux/types.h>
#include <linux/of_irq.h>
#include <linux/notifier.h>
#include <linux/pinctrl/devinfo.h>
#include "../../../misc/mediatek/include/mt-plat/mt_gpio.h"
#include "../../../misc/mediatek/include/mt-plat/mt6735/include/mach/gpio_const.h"
#include "mt_spi.h"
//#include <mach/eint.h>
//#include <cust_eint.h>
//#include <linux/earlysuspend.h>
/****************GFX1XM Macro interface*******************/
#define FW_UPDATE                1
#define ESD_PROTECT              1
#define CFG_UPDATE               1

#define GFX1XM_DEBUG             1
#define CONFIG_HAS_EARLYSUSPEND  0
#define GFX1XM_FASYNC 		     1//If support fasync mechanism.
#define PROCESSOR_64_BIT         1
#define DEMO_APK                 1//for goodix apk use.switch off 

#define GFX1XM_DRIVER_VERSION    "V1.2<20151207>"
#define GFX1XM_CONFIG_PROC_FILE  "gfx1xm_config"

#define     MTK_SPI_ALIGN_MASK_NUM  10
#define     MTK_SPI_ALIGN_MASK  ((0x1 << MTK_SPI_ALIGN_MASK_NUM) - 1)

#define GFX18M_PID "GFx18M"
#define GFX16M_PID "GFx16M"

#define GFX1XM_PID_LEN 6
/*
 * This supports access to SPI devices using normal userspace I/O calls.
 * Note that while traditional UNIX/POSIX I/O semantics are half duplex,
 * and often mask message boundaries, full SPI support requires full duplex
 * transfers.  There are several kinds of internal message boundaries to
 * handle chipselect management and other protocol options.
 *
 * SPI has a character major number assigned.  We allocate minor numbers
 * dynamically using a bitmask.  You must use hotplug tools, such as udev
 * (or mdev with busybox) to create and destroy the /dev/spidevB.C device
 * nodes, since there is no fixed association of minor numbers with any
 * particular SPI bus or device.
 */

/*spi device name*/
#define SPI_DEV_NAME  			"spidev"
/*device name after register in charater*/
#define DEV_NAME 				"goodix_fp"
#define	CHRD_DRIVER_NAME		"goodix"
#define	CLASS_NAME			    "goodix-spi"
#define SPIDEV_MAJOR			156	/* assigned */
#define N_SPI_MINORS			32	/* ... up to 256 */

#define GFX1XM_INPUT_MENU_KEY   KEY_MENU
#define GFX1XM_INPUT_BACK_KEY   KEY_BACK
#define GFX1XM_INPUT_HOME_KEY   KEY_HOMEPAGE
#define GFX1XM_FF_KEY           KEY_FINGER_PRINT


/********************GFX1XM Mapping**********************/
#define GFX1XM_BASE             (0x8000)
#define GFX1XM_OFFSET(x)        (GFX1XM_BASE + x)

#define GFX1XM_VERSION	        GFX1XM_OFFSET(0)
#define GFX1XM_CONFIG_DATA      GFX1XM_OFFSET(0x40)
#define GFX1XM_CFG_ADDR	        GFX1XM_OFFSET(0x47)
#define GFX1XM_MODE_STATUS      GFX1XM_OFFSET(0x043)
//#define GFX1XM_MIXER_DATA     GFX1XM_OFFSET(0x140)
#define GFX1XM_BUFFER_STATUS	GFX1XM_OFFSET(0x140)
#define GFX1XM_KEY_DATA         GFX1XM_OFFSET(0x142)
#define GFX1XM_NOISE_DATA       GFX1XM_OFFSET(0x144)
#define GFX1XM_LONG_PRESS_STDP  GFX1XM_OFFSET(0x146)
#define GFX1XM_BUFFER_DATA      GFX1XM_OFFSET(0x141)


#define GFX1XM_BUF_STA_MASK     (0x1<<7)
#define	GFX1XM_BUF_STA_READY	(0x1<<7)
#define	GFX1XM_BUF_STA_BUSY     (0x0<<7)

#define	GFX1XM_IMAGE_MASK       (0x1<<6)
#define	GFX1XM_IMAGE_ENABLE     (0x1)
#define	GFX1XM_IMAGE_DISABLE	(0x0)

#define	GFX1XM_KEY_MASK	        (GFX1XM_HOME_KEY_MASK | \
                                 GFX1XM_MENU_KEY_MASK | \
                                 GFX1XM_BACK_KEY_MASK )

//home key
#define	GFX1XM_HOME_KEY_MASK	(0x1<<5)
#define	GFX1XM_HOME_KEY_ENABL   (0x1)
#define	GFX1XM_HOME_KEY_DISABLE (0x0)

#define	GFX1XM_HOME_KEY_STA     (0x1<<4)
//menu key
#define	GFX1XM_MENU_KEY_MASK    (0x1<<3)
#define	GFX1XM_MENU_KEY_ENABLE	(0x1)
#define	GFX1XM_MENU_KEY_DISABLE	(0x0)

#define	GFX1XM_MENU_KEY_STA		(0x1<<2)
//back key
#define	GFX1XM_BACK_KEY_MASK    (0x1<<1)
#define	GFX1XM_BACK_KEY_ENABLE  (0x1)
#define	GFX1XM_BACK_KEY_DISABLE (0x0)

#define	GFX1XM_BACK_KEY_STA     (0x1<<0)


#define	GFX1XM_IMAGE_MODE       (0x00)
#define	GFX1XM_KEY_MODE	        (0x01)
#define GFX1XM_SLEEP_MODE       (0x02)
#define GFX1XM_FF_MODE			(0x03)
#define GFX1XM_DEBUG_MODE       (0x56)

/**********************GFX1XM ops****************************/
#define GFX1XM_W                0xF0
#define GFX1XM_R                0xF1
#define GFX1XM_WDATA_OFFSET     (0x3)
#define GFX1XM_RDATA_OFFSET     (0x5)
#define GFX1XM_CFG_LEN          (249)   /*config data length*/

/**********************************************************/



/**************************debug******************************/
#define DEFAULT_DEBUG   (0)
#define SUSPEND_DEBUG   (1)
#define SPI_DEBUG       (2)
#define TIME_DEBUG      (3)
#define FLOW_DEBUG      (4)
static int g_debug_level = DEFAULT_DEBUG;
static int gfx1xm_debug_level(int level)
{
	g_debug_level=level;
	printk("=======sonia g_debug_level=%d",g_debug_level);
	return 0;
}
#if GFX1XM_DEBUG
#define gfx1xm_debug(level, fmt, args...) do{ \
    if(g_debug_level >= level) {\
	printk("gfx1xm"fmt"\n", ##args); \
    } \
}while(0)
#define gfx1xm_error(fmt,arg...)          printk("<<gfx1xm_error>> "fmt"\n",##arg)  

#define FUNC_ENTRY()  gfx1xm_debug(FLOW_DEBUG, "gfx1xm:%s, entry\n", __func__)
#define FUNC_EXIT()  gfx1xm_debug(FLOW_DEBUG,"gfx1xm:%s, exit\n", __func__)
#endif


/*************************************************************/
struct gfx1xm_dev {
#if CFG_UPDATE	
	u8 config[GFX1XM_CFG_LEN+GFX1XM_WDATA_OFFSET];
#endif
	dev_t devt;
	spinlock_t spi_lock;
	struct spi_device *spi;
	struct list_head device_entry;
	struct input_dev *input;
#if ESD_PROTECT
	int clk_tick_cnt;
	struct delayed_work esd_check_work;
	struct workqueue_struct *esd_wq;
#endif
	/* buffer is NULL unless this device is open (users > 0) */
	struct mutex buf_lock;
	struct mutex fb_lock;
	unsigned long irq_gpio;
	unsigned long reset_gpio;
	unsigned int poweron;
	unsigned int esd_running;
	unsigned users;
	u8 *buffer;	
	u8 buf_status;
	u8 mode;
#ifdef GFX1XM_FASYNC
	struct fasync_struct *async;
#endif
#if CONFIG_HAS_EARLYSUSPEND
    struct early_suspend early_fp;
#endif
#ifdef CONFIG_OF
	struct pinctrl *pc;
	struct pinctrl_state *pwr_on;
	struct pinctrl_state *pwr_off;
	struct pinctrl_state *rst_low;
	struct pinctrl_state *rst_high;
	struct pinctrl_state *irq_init;
	struct pinctrl_state *irq_in;
	struct pinctrl_state *irq_dis;
	struct pinctrl_state *irq_en;
	struct pinctrl_state *id_up;
	struct pinctrl_state *id_down;
	unsigned long id_gpio;
#endif
};

#if CFG_UPDATE
static const u8 vendor_id_1[3]={0xA0};//合力泰
static const u8 vendor_id_2[3]={0xA1};//凯尔
static const u8 vendor_id_3[3]={0xA2};//三赢兴

/**************************config for GFx18M use********************************************/
//default is for GF318M  AES OFF
#define GFX18M_CFG_GROUP0 {\
0x00,0x3c,0x3c,0xe4,0x0c,0x30,0x3f,0x02,0x00,0x50,0x40,0x50,0x50,0xe4,0x0c,0x30,\
0x2f,0x03,0x40,0x03,0x11,0xa0,0x0d,0x00,0x14,0x00,0x0f,0x0f,0x0f,0xb2,0x3f,0xb3,\
0x33,0x03,0x90,0x01,0x00,0x05,0x0e,0x80,0x20,0x0f,0x22,0x00,0x08,0x07,0x08,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x25,0x04,0xca,0xa4,0x26,0x66,0x00,\
0x00,0x00,0x01,0x00,0x01,0x0f,0x96,0x00,0x01,0x02,0x85,0x00,0x03,0x20,0x20,0x50,\
0x3e,0x11,0x01,0x00,0x00,0x00,0x00,0x03,0x09,0x00,0x31,0x00,0x07,0x14,0x41,0x00,\
0x50,0x00,0x00,0x00,0x32,0x00,0x04,0x00,0x32,0x01,0xa0,0x00,0x00,0x79,0xc8,0x00,\
0x00,0x00,0x28,0x00,0x05,0x04,0x78,0x00,0x08,0x00,0x07,0x00,0x20,0x00,0x20,0x00,\
0x30,0x00,0x3d,0x00,0x41,0x00,0x00,0x00,0x03,0x07,0x80,0x00,0x20,0x00,0x32,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfa,0x01,\
}
//default is for GF318M  AES OFF
#define GFX18M_CFG_GROUP1 {\
0x00,0x3C,0x3C,0xE4,0x0C,0x30,0x3F,0x02,0x00,0x50,0x40,0x50,0x50,0xE4,0x0C,0x30,\
0x2F,0x03,0x40,0x03,0x11,0xA0,0x0D,0x00,0x14,0x03,0x0F,0x0F,0x0F,0xB2,0x3F,0xB3,\
0x33,0x03,0x90,0x01,0x00,0x05,0x0E,0x80,0x20,0x0F,0x22,0x00,0x08,0x07,0x08,0x06,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x25,0x04,0xCA,0xA4,0x26,0x66,0x00,\
0x00,0x00,0x01,0x00,0x01,0x0F,0x96,0x00,0x01,0x02,0x85,0x00,0x03,0x20,0x20,0x50,\
0x3E,0x11,0x01,0x00,0x00,0x00,0x00,0x03,0x09,0x00,0x31,0x00,0x07,0x14,0x41,0x00,\
0x50,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x32,0x01,0xA0,0x00,0x00,0x79,0xC8,0x00,\
0x00,0x00,0x28,0x00,0x05,0x04,0x65,0x00,0x08,0x00,0x07,0x00,0x20,0x00,0x18,0x00,\
0x3D,0x00,0x48,0x00,0x22,0x00,0x00,0x00,0x03,0x07,0x80,0x00,0x20,0x00,0x20,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x37,0x01,\
}
//default is for GF318M  AES OFF
#define GFX18M_CFG_GROUP2 {\
0x00,0x3C,0x3C,0xE4,0x0C,0x30,0x3F,0x02,0x00,0x50,0x40,0x50,0x50,0xE4,0x0C,0x30,\
0x2F,0x03,0x40,0x03,0x11,0xA0,0x0D,0x00,0x14,0x03,0x0F,0x0F,0x0F,0xB2,0x3F,0xB3,\
0x33,0x03,0x90,0x01,0x00,0x05,0x0E,0x80,0x20,0x0F,0x22,0x00,0x08,0x07,0x08,0x06,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0x01,0x25,0x04,0xCA,0xA4,0x26,0x66,0x00,\
0x00,0x00,0x01,0x00,0x01,0x0F,0x96,0x00,0x01,0x02,0x85,0x00,0x03,0x20,0x20,0x50,\
0x3E,0x11,0x01,0x00,0x00,0x00,0x00,0x03,0x09,0x00,0x31,0x00,0x07,0x14,0x41,0x00,\
0x50,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x32,0x01,0xA0,0x00,0x00,0x79,0xC8,0x00,\
0x00,0x00,0x28,0x00,0x05,0x04,0x65,0x00,0x08,0x00,0x07,0x00,0x20,0x00,0x18,0x00,\
0x3D,0x00,0x48,0x00,0x22,0x00,0x00,0x00,0x03,0x07,0x80,0x00,0x20,0x00,0x20,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x37,0x01,\
}
/*****************************config for GFx16M use*******************************************/
//default is for GF316M  //AES OFF
#define GFX16M_CFG_GROUP0 {\
0x41,0x3c,0x3c,0xe4,0x0c,0x30,0x3f,0x02,0x00,0x50,0x40,0x50,0x50,0xe4,0x0c,0x30,\
0x2f,0x03,0x40,0x03,0x11,0xa0,0x0d,0x00,0x14,0x03,0x0f,0x0f,0x0f,0xb2,0x3f,0xb3,\
0x33,0x03,0x90,0x01,0x40,0x05,0x0e,0x80,0x20,0x0f,0x22,0x00,0x08,0x10,0x12,0x11,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xe8,0x25,0x04,0xca,0xa4,0x26,0x66,0x00,\
0x00,0x00,0x01,0x00,0x01,0x0f,0x96,0x00,0x01,0x02,0x85,0x00,0x03,0x20,0x20,0x50,\
0x3e,0x11,0x01,0x00,0x00,0x00,0x00,0x03,0x09,0x00,0x31,0x00,0x07,0x14,0x41,0x00,\
0x50,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x32,0x01,0xa0,0x00,0x00,0x79,0xc8,0x00,\
0x00,0x00,0x28,0x00,0x05,0x04,0x30,0x00,0x08,0x00,0x07,0x00,0x20,0x00,0x18,0x00,\
0x3b,0x00,0x5d,0x00,0x22,0x00,0x00,0x00,0x03,0x07,0x80,0x00,0x20,0x00,0x20,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD3,0x01,\
}
//default is for GF316M  //AES OFF
#define GFX16M_CFG_GROUP1 {\
0x41,0x3c,0x3c,0xe4,0x0c,0x30,0x3f,0x02,0x00,0x50,0x40,0x50,0x50,0xe4,0x0c,0x30,\
0x2f,0x03,0x40,0x03,0x11,0xa0,0x0d,0x00,0x14,0x03,0x0f,0x0f,0x0f,0xb2,0x3f,0xb3,\
0x33,0x03,0x90,0x01,0x40,0x05,0x0e,0x80,0x20,0x0f,0x22,0x00,0x08,0x10,0x12,0x11,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xe8,0x25,0x04,0xca,0xa4,0x26,0x66,0x00,\
0x00,0x00,0x01,0x00,0x01,0x0f,0x96,0x00,0x01,0x02,0x85,0x00,0x03,0x20,0x20,0x50,\
0x3e,0x11,0x01,0x00,0x00,0x00,0x00,0x03,0x09,0x00,0x31,0x00,0x07,0x14,0x41,0x00,\
0x50,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x32,0x01,0xa0,0x00,0x00,0x79,0xc8,0x00,\
0x00,0x00,0x28,0x00,0x05,0x04,0x30,0x00,0x08,0x00,0x07,0x00,0x20,0x00,0x18,0x00,\
0x3b,0x00,0x5d,0x00,0x22,0x00,0x00,0x00,0x03,0x07,0x80,0x00,0x20,0x00,0x20,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD3,0x01,\
}
//default is for GF316M  //AES OFF
#define GFX16M_CFG_GROUP2 {\
0x41,0x3c,0x3c,0xe4,0x0c,0x30,0x3f,0x02,0x00,0x50,0x40,0x50,0x50,0xe4,0x0c,0x30,\
0x2f,0x03,0x40,0x03,0x11,0xa0,0x0d,0x00,0x14,0x03,0x0f,0x0f,0x0f,0xb2,0x3f,0xb3,\
0x33,0x03,0x90,0x01,0x40,0x05,0x0e,0x80,0x20,0x0f,0x22,0x00,0x08,0x10,0x12,0x11,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x18,0xe8,0x25,0x04,0xca,0xa4,0x26,0x66,0x00,\
0x00,0x00,0x01,0x00,0x01,0x0f,0x96,0x00,0x01,0x02,0x85,0x00,0x03,0x20,0x20,0x50,\
0x3e,0x11,0x01,0x00,0x00,0x00,0x00,0x03,0x09,0x00,0x31,0x00,0x07,0x14,0x41,0x00,\
0x50,0x00,0x00,0x00,0x20,0x00,0x04,0x00,0x32,0x01,0xa0,0x00,0x00,0x79,0xc8,0x00,\
0x00,0x00,0x28,0x00,0x05,0x04,0x30,0x00,0x08,0x00,0x07,0x00,0x20,0x00,0x18,0x00,\
0x3b,0x00,0x5d,0x00,0x22,0x00,0x00,0x00,0x03,0x07,0x80,0x00,0x20,0x00,0x20,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,\
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD3,0x01,\
}
#endif

/**********************IO Magic**********************/
#define  GFX1XM_IOC_MAGIC    'g'  //define magic number
struct gfx1xm_ioc_transfer {
	u8	cmd;
	u8 reserve;
	u16	addr;
	u32 len;
#if PROCESSOR_64_BIT
	u32  buf;
#else
	u8 *buf;
#endif
};

//define commands

/*read/write GFX1XM registers*/
#define  GFX1XM_IOC_CMD	_IOWR(GFX1XM_IOC_MAGIC, 1, struct gfx1xm_ioc_transfer)
#define  GFX1XM_IOC_REINIT	_IO(GFX1XM_IOC_MAGIC, 0)
#define  GFX1XM_IOC_SETSPEED	_IOW(GFX1XM_IOC_MAGIC, 2, u32)
//#define  GFX1XM_IOC_DISABLE    _IO(GFX1XM_IOC_MAGIC, 3)
//#define  GFX1XM_IOC_ENABLE     _IO(GFX1XM_IOC_MAGIC, 4)

#define  GFX1XM_IOC_MAXNR    3

/*******************Refering to hardware platform*****************************/
#define		GFX1XM_IRQ_NUM		30
#define		GFX1XM_IRQ_PIN_NUM		58
#define 	GFX1XM_IRQ_PIN 		(GPIO58 | 0x80000000)
#define 	GFX1XM_IRQ_PIN_M_GPIO   GPIO_MODE_00
#define 	GFX1XM_IRQ_PIN_M_EINT   GPIO_MODE_04

#define 	GFX1XM_RST_PIN		(GPIO66 | 0x80000000)
#define 	GFX1XM_RST_PIN_M_GPIO   GPIO_MODE_00
#define 	GFX1XM_RST_PIN_M_DAIPCMOUT   GPIO_MODE_01

#define		GFX1XM_SCK_PIN		(GPIO66 | 0x80000000)            
#define		GFX1XM_SCK_PIN_M_GPIO	GPIO_MODE_00
#define		GFX1XM_SCK_PIN_M_SCK	GPIO_MODE_01

#define		GFX1XM_CS_PIN		(GPIO65 | 0x80000000)
#define		GFX1XM_CS_PIN_M_GPIO	GPIO_MODE_00
#define		GFX1XM_CS_PIN_M_CS	GPIO_MODE_01
	
#define		GFX1XM_MOSI_PIN		(GPIO68 | 0x80000000)
#define		GFX1XM_MOSI_PIN_M_GPIO	GPIO_MODE_00
#define		GFX1XM_MOSI_PIN_M_MOSI	GPIO_MODE_01

#define		GFX1XM_MISO_PIN		(GPIO67 | 0x80000000)
#define		GFX1XM_MISO_PIN_M_GPIO	GPIO_MODE_00
#define		GFX1XM_MISO_PIN_M_MISO	GPIO_MODE_01


/*Confure the IRQ pin for GFX1XM irq if necessary*/
inline static void gfx1xm_spi_pins_config(void)
{
	/*cs*/
  //  mt_set_gpio_mode(GFX1XM_CS_PIN, GFX1XM_CS_PIN_M_CS);

	/*sck*/
  //  mt_set_gpio_mode(GFX1XM_SCK_PIN, GFX1XM_SCK_PIN_M_SCK);

	/*miso*/
 //  mt_set_gpio_mode(GFX1XM_MISO_PIN, GFX1XM_MISO_PIN_M_MISO);

	/*mosi*/
  //  mt_set_gpio_mode(GFX1XM_MOSI_PIN, GFX1XM_MOSI_PIN_M_MOSI);

    msleep(1);
}
inline static void gfx1xm_irq_cfg(struct gfx1xm_dev *gfx1xm_dev)
{
	/*Config IRQ pin, referring to platform.*/
	pinctrl_select_state(gfx1xm_dev->pc, gfx1xm_dev->irq_en);
}

/********************************************************************
*CPU output low level in RST pin to reset GFX1XM. This is the MUST action for GFX1XM.
*Take care of this function. IO Pin driver strength / glitch and so on.
********************************************************************/
inline static void gfx1xm_hw_reset(struct gfx1xm_dev *gfx1xm_dev, int ms)
{	
	gfx1xm_debug(DEFAULT_DEBUG, "gfx1xm_hw_reset");
   // mt_set_gpio_pull_enable(GFX1XM_MISO_PIN, GPIO_PULL_ENABLE);
   // mt_set_gpio_pull_select(GFX1XM_MISO_PIN, GPIO_PULL_UP);
	
	pinctrl_select_state(gfx1xm_dev->pc, gfx1xm_dev->rst_low);			 
	msleep(5);  //delay for power to reset  typical:10ms max:50ms
	pinctrl_select_state(gfx1xm_dev->pc, gfx1xm_dev->rst_high);
	
	if (ms)
	    msleep(ms);
	//mt_set_gpio_pull_enable(GFX1XM_MISO_PIN, GPIO_PULL_DISABLE);
}

int gfx1xm_spi_read_bytes(struct gfx1xm_dev *gfx1xm_dev,
                                u16 addr, u32 data_len, u8 *rx_buf);

int gfx1xm_spi_write_bytes(struct gfx1xm_dev *gfx1xm_dev,
                                u16 addr, u32 data_len, u8 *tx_buf);
int gfx1xm_fw_update(struct gfx1xm_dev* gfx1xm_dev, unsigned char *buf, unsigned short len);
#endif
